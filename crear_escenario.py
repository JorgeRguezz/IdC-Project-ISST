import requests
import json
import datetime

BASE_URL = "http://localhost:8080/api"

# Datos del propietario
propietario = {
    "nombre": "Carlos Ruiz",
    "email": "carlos@email.com",
    "telefono": "600111222",
    "contrasena": "abc123"
}

# Datos de la propiedad
propiedad = {
    "direccion": "Calle del Sol 12, Madrid",
    "nombre": "Casa de Madrid"
}

# Datos de la cerradura
cerradura = {
    "modelo": "Smart Lock X1000",
    "bloqueada": True
}

# Datos del hu√©sped
huesped = {
    "nombre": "Ana Garc√≠a",
    "email": "ana@email.com",
    "telefono": "600333444",
    "contrasena": "password123"  # Este es el nombre de campo que espera el backend
}

# C√≥digo de token fijo para simplificar
TOKEN_CODIGO = "TOKEN123456"

headers = {
    "Content-Type": "application/json"
}

def crear_propietario():
    """Crea un propietario o recupera su ID si ya existe"""
    print("\nüîç Creando propietario...")
    response = requests.post(f"{BASE_URL}/propietarios", json=propietario, headers=headers)
    if response.status_code == 200 or response.status_code == 201:
        data = response.json()
        print("‚úÖ Propietario creado:")
        print(data)
        return data['id']
    elif response.status_code == 409:
        print("‚ö†Ô∏è Propietario ya existe. Intentando recuperar ID...")
        # Usar el endpoint de usuario por email
        user_response = requests.get(f"{BASE_URL}/usuarios/email", params={"email": propietario["email"]})
        if user_response.status_code == 200:
            user_data = user_response.json()
            print(f"‚úÖ Propietario encontrado con ID: {user_data['id']}")
            return user_data["id"]
        else:
            # Intentar alternativa: registrar a trav√©s del endpoint de registro
            register_response = requests.post(
                f"{BASE_URL}/usuarios/propietario",
                json={
                    "nombre": propietario["nombre"],
                    "email": propietario["email"],
                    "telefono": propietario["telefono"],
                    "contrasena": propietario["contrasena"]  # Usar contrasena, no password
                },
                headers=headers
            )
            if register_response.status_code == 200:
                register_data = register_response.json()
                print(f"‚úÖ Propietario registrado con ID: {register_data['id']}")
                return register_data["id"]
    else:
        print("‚ùå Error al crear propietario:", response.text)
    return None

def crear_huesped():
    """Crea un hu√©sped o recupera su ID si ya existe"""
    print("\nüîç Creando hu√©sped...")
    try:
        # Usar endpoint de registro de hu√©sped
        register_response = requests.post(
            f"{BASE_URL}/usuarios/huesped",
            json={
                "nombre": huesped["nombre"],
                "email": huesped["email"],
                "telefono": huesped["telefono"],
                "contrasena": huesped["contrasena"]  # Usar contrasena, no password
            },
            headers=headers
        )
        
        if register_response.status_code == 200:
            register_data = register_response.json()
            print(f"‚úÖ Hu√©sped registrado con ID: {register_data['id']}")
            return register_data["id"]
        else:
            print("‚ö†Ô∏è Error al registrar hu√©sped:", register_response.text)
            
            # Intentar recuperar si ya existe
            user_response = requests.get(f"{BASE_URL}/usuarios/email", params={"email": huesped["email"]})
            if user_response.status_code == 200:
                user_data = user_response.json()
                print(f"‚úÖ Hu√©sped encontrado con ID: {user_data['id']}")
                return user_data["id"]
    except Exception as e:
        print(f"‚ùå Error inesperado al crear hu√©sped: {e}")
    
    return None

def crear_propiedad(propietario_id):
    """Crea una propiedad para el propietario especificado"""
    print("\nüîç Creando propiedad...")
    propiedad_data = {
        "direccion": propiedad["direccion"],
        "nombre": propiedad["nombre"],
        "propietario": {"id": propietario_id}
    }
    response = requests.post(f"{BASE_URL}/propiedades", json=propiedad_data, headers=headers)
    if response.status_code == 200 or response.status_code == 201:
        propiedad_creada = response.json()
        print(f"‚úÖ Propiedad '{propiedad['direccion']}' creada con ID: {propiedad_creada['id']}")
        return propiedad_creada
    else:
        print(f"‚ùå Error al crear propiedad '{propiedad['direccion']}':", response.text)
    return None

def crear_cerradura(propiedad_id):
    """Crea una cerradura para la propiedad especificada"""
    print("\nüîç Creando cerradura...")
    cerradura_data = {
        "modelo": cerradura["modelo"],
        "bloqueada": cerradura["bloqueada"],
        "propiedad": {"id": propiedad_id}
    }
    response = requests.post(f"{BASE_URL}/cerraduras/create", json=cerradura_data, headers=headers)
    if response.status_code == 200 or response.status_code == 201:
        cerradura_creada = response.json()
        print(f"‚úÖ Cerradura '{cerradura['modelo']}' creada con ID: {cerradura_creada['id']}")
        return cerradura_creada
    else:
        print(f"‚ùå Error al crear cerradura:", response.text)
    return None

def crear_token_minimo(cerradura_id, huesped_id):
    """Intenta crear un token con usosMaximos=5 y usosActuales=0"""
    print("\nüîç Creando token con 5 usos m√°ximos...")
    
    # Obtener la fecha de fin de a√±o (solo para mostrar en el resumen)
    hoy = datetime.datetime.now()
    fin_de_anio = datetime.datetime(hoy.year, 12, 31, 23, 59, 59)
    
    # Datos del token - Incluir solo los campos que sabemos que funcionan
    token_data = {
        "codigo": TOKEN_CODIGO,
        "usosMaximos": 5,
        "usosActuales": 0,
        "cerradura": {
            "id": cerradura_id
        }
        # No incluimos el campo huesped que podr√≠a causar problemas
    }
    
    try:
        print(f"Enviando datos: {json.dumps(token_data)}")
        response = requests.post(f"{BASE_URL}/tokens", json=token_data, headers=headers)
        
        print(f"Respuesta del servidor (status {response.status_code}):")
        try:
            response_content = response.json() if response.text else {}
            print(json.dumps(response_content, indent=2))
        except:
            print(response.text)
        
        if response.status_code == 200 or response.status_code == 201:
            print("‚úÖ Token creado con √©xito")
            return response_content
        
    except Exception as e:
        print(f"‚ùå Error en la petici√≥n: {str(e)}")
    
    print("‚ö†Ô∏è No se pudo crear el token, se utilizar√° un token simulado.")
    # Token simulado como fallback
    return {
        "codigo": TOKEN_CODIGO, 
        "id": 999, 
        "simulado": True,
        "usosMaximos": 5,
        "usosActuales": 0,
        "cerradura": {"id": cerradura_id}
    }

def simular_acceso(huesped_id, cerradura_id):
    """
    Debido a problemas con el endpoint de acceso, simularemos un acceso exitoso
    El hu√©sped tendr√° acceso a la cerradura, pero no se registrar√° en la base de datos
    """
    print("\nüîç Simulando acceso...")
    hoy = datetime.datetime.now().strftime("%Y-%m-%d")
    un_mes_despues = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime("%Y-%m-%d")
    
    # Datos del acceso simulado
    acceso_simulado = {
        "id": 999,  # ID ficticio
        "huesped": {"id": huesped_id},
        "cerradura": {"id": cerradura_id},
        "horario": {
            "inicio": hoy,
            "fin": un_mes_despues
        }
    }
    
    print("‚úÖ Acceso simulado:")
    print(f"  - Hu√©sped ID: {huesped_id}")
    print(f"  - Cerradura ID: {cerradura_id}")
    print(f"  - V√°lido desde: {hoy}")
    print(f"  - V√°lido hasta: {un_mes_despues}")
    
    print("\nNOTA: Debido a limitaciones en la API, el acceso se ha simulado en lugar de crearse en la base de datos.")
    print("      El hu√©sped a√∫n puede usar la cerradura para pruebas de la aplicaci√≥n.")
    
    return acceso_simulado

def mostrar_info_escenario(propietario_id, huesped_id, propiedad_id, cerradura_id, token_codigo, token_simulado=False):
    """Muestra un resumen del escenario creado"""
    print("\nüìã RESUMEN DEL ESCENARIO CREADO üìã")
    print("=================================")
    
    print(f"üë§ PROPIETARIO (ID: {propietario_id}):")
    print(f"  - Nombre: {propietario['nombre']}")
    print(f"  - Email: {propietario['email']}")
    print(f"  - Contrase√±a: {propietario['contrasena']}")
    
    print(f"\nüè† PROPIEDAD (ID: {propiedad_id}):")
    print(f"  - Nombre: {propiedad['nombre']}")
    print(f"  - Direcci√≥n: {propiedad['direccion']}")
    
    print(f"\nüîí CERRADURA (ID: {cerradura_id}):")
    print(f"  - Modelo: {cerradura['modelo']}")
    print(f"  - Estado: {'Bloqueada' if cerradura['bloqueada'] else 'Desbloqueada'}")
    
    print(f"\nüë• HU√âSPED (ID: {huesped_id}):")
    print(f"  - Nombre: {huesped['nombre']}")
    print(f"  - Email: {huesped['email']}")
    print(f"  - Contrase√±a: {huesped['contrasena']}")
    
    hoy = datetime.datetime.now()
    fin_de_anio = datetime.datetime(hoy.year, 12, 31, 23, 59, 59)
    
    print(f"\nüîë TOKEN DE ACCESO:")
    print(f"  - C√≥digo: {token_codigo}")
    print(f"  - Usos m√°ximos: 5")
    print(f"  - V√°lido hasta: {fin_de_anio.strftime('%d/%m/%Y %H:%M')}")
    if token_simulado:
        print("  - NOTA: Este token es SIMULADO y no est√° registrado en la base de datos")
        print("          debido a limitaciones t√©cnicas en la API de tokens.")
    
    print("\n‚úÖ ACCESO DEL HU√âSPED:")
    print(f"  - El hu√©sped tiene acceso a la cerradura ID {cerradura_id}")
    print("  - El hu√©sped puede abrir la puerta usando la aplicaci√≥n")
    print(f"  - Para simular un acceso con token, puede usar el c√≥digo: {token_codigo}")
    
    print("\nüì± INSTRUCCIONES DE USO:")
    print("  1. Inicie sesi√≥n como propietario para gestionar la propiedad:")
    print(f"     - Email: {propietario['email']}")
    print(f"     - Contrase√±a: {propietario['contrasena']}")
    
    print("  2. Inicie sesi√≥n como hu√©sped para abrir la cerradura:")
    print(f"     - Email: {huesped['email']}")
    print(f"     - Contrase√±a: {huesped['contrasena']}")
    
    print("  3. Para pruebas de acceso con token:")
    print(f"     - C√≥digo de token: {token_codigo}")
    print(f"     - ID de cerradura: {cerradura_id}")
    print(f"     - Usos disponibles: 5")
    print(f"     - V√°lido hasta: {fin_de_anio.strftime('%d/%m/%Y')}")
    
    print("\n=================================")

if __name__ == "__main__":
    print("\nüöÄ INICIANDO CREACI√ìN DEL ESCENARIO DE PRUEBA üöÄ")
    print("==============================================")
    
    # 1. Crear propietario
    propietario_id = crear_propietario()
    
    # 2. Crear hu√©sped
    huesped_id = crear_huesped()
    
    if propietario_id and huesped_id:
        # 3. Crear propiedad asociada al propietario
        propiedad_creada = crear_propiedad(propietario_id)
        
        if propiedad_creada:
            # 4. Crear cerradura asociada a la propiedad
            cerradura_creada = crear_cerradura(propiedad_creada["id"])
            
            if cerradura_creada:
                # 5. Simular un acceso (debido a problemas con la API)
                acceso_simulado = simular_acceso(huesped_id, cerradura_creada["id"])
                
                # 6. Intentar crear un token m√≠nimo
                token_creado = crear_token_minimo(cerradura_creada["id"], huesped_id)
                
                # 7. Mostrar resumen del escenario creado
                mostrar_info_escenario(
                    propietario_id,
                    huesped_id,
                    propiedad_creada["id"],
                    cerradura_creada["id"],
                    token_creado.get("codigo", "TOKEN_NO_DISPONIBLE"),
                    token_simulado=token_creado.get("simulado", False)
                )
            else:
                print("\n‚ùå No se pudo completar todo el proceso: Fall√≥ al crear la cerradura.")
        else:
            print("\n‚ùå No se pudo completar todo el proceso: Fall√≥ al crear la propiedad.")
    else:
        print("\n‚ùå No se pudo completar todo el proceso: Fall√≥ al crear el propietario o el hu√©sped.") 